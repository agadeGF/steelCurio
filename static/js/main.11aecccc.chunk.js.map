{"version":3,"sources":["components/App/logo.svg","routes/JodusNodus/JodusNodus.js","routes/Commissioning/useDevices.js","components/DeviceList/DeviceList.js","components/SubmitDevices/SubmitDevices.js","routes/Commissioning/Commissioning.js","routes/index.js","homeScreen.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","JodusNodus","useState","result","setResult","delay","onError","err","console","error","onScan","data","style","maxWidth","margin","initialState","reducer","state","action","type","find","d","id","push","name","device","DeviceList","devices","onChangeName","onChange","e","onClick","target","value","onBlur","length","className","map","key","defaultValue","onFocus","SubmitDevices","email","setEmail","fetchClaimId","a","fetch","process","method","headers","body","JSON","stringify","label","response","text","claimToSelf","claimId","window","location","href","sendMail","url","mailString","disabled","Commissioning","useReducer","dispatch","Routes","path","component","to","deferredPrompt","canInstall","promptInstallation","prompt","userChoice","then","choice","outcome","log","App","src","logo","alt","homeScreen","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","preventDefault"],"mappings":"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","file":"static/js/main.11aecccc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useState } from 'react';\r\nimport QrReader from 'react-qr-reader';\r\n\r\nconst JodusNodus = () => {\r\n  const [result, setResult] = useState('No result');\r\n\r\n  const handleScan = data => {\r\n    if (data) setResult(data);\r\n  }\r\n\r\n  const handleError = err => {\r\n    console.error(err)\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <QrReader\r\n        delay={300}\r\n        onError={handleError}\r\n        onScan={handleScan}\r\n        style={{ maxWidth: '600px', margin: '20px auto' }}\r\n      />\r\n      <p>{result}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JodusNodus;\r\n","import { useReducer } from 'react';\r\n\r\nexport const initialState = [];\r\n\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    \r\n    case 'add':\r\n      if (state.find(d => d.id === action.id)) return state;\r\n      state.push({ id: action.id, name: action.id });\r\n      return [...state];\r\n    \r\n    case 'editName':\r\n      const device = state.find(d => d.id === action.id);\r\n      if (device) device.name = action.name;\r\n      return [...state];\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default () => useReducer(reducer, initialState);\r\n","import React from 'react';\r\nimport './DeviceList.css';\r\n\r\nconst DeviceList = ({devices, onChangeName}) => {\r\n  const onChange = e => {\r\n    onChangeName(e);\r\n  };\r\n\r\n  const onClick = e => {\r\n    if (e.target.value === e.target.id) {\r\n      e.target.value = '';\r\n    }\r\n  }\r\n\r\n  const onBlur = e => {\r\n    if (!e.target.value.length) {\r\n      e.target.value = e.target.id;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"device-list\">\r\n      {\r\n        devices.map(device => (\r\n          <div key={device.id}>\r\n            <label className=\"device-list__label\">Device name: </label>\r\n            <input\r\n              id={device.id}\r\n              className=\"device-list__name\"\r\n              type=\"text\"\r\n              defaultValue={device.name}\r\n              onChange={onChange}\r\n              onFocus={onClick}\r\n              onBlur={onBlur}\r\n            />\r\n          </div>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeviceList;\r\n","import React, { useState } from 'react';\r\nimport './SubmitDevices.css';\r\n\r\nconst SubmitDevices = ({ devices }) => {\r\n  const [email, setEmail] = useState(null);\r\n  const subject = 'New GiM devices has been commissioned for you';\r\n  const body = 'Hi, click this link to claim your newly commissioned devices:'\r\n\r\n  const fetchClaimId = async () => {\r\n    const response = await fetch(process.env.REACT_APP_DEVICE_REGISTRY_URL, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json-patch+json' },\r\n      body: JSON.stringify({ devices: devices.map(d => ({\r\n        id: d.id,\r\n        label: d.name,\r\n      })) }),\r\n    });\r\n    return await response.text();\r\n  }\r\n\r\n  const claimToSelf = async () => {\r\n    const claimId = await fetchClaimId();\r\n    window.location.href = `${process.env.REACT_APP_CLAIM_REDIRECT_URL}/devices?claimId=${claimId}`;\r\n  }\r\n\r\n  const sendMail = async () => {\r\n    const claimId = await fetchClaimId();\r\n    const url = `${process.env.REACT_APP_CLAIM_REDIRECT_URL}/devices?claimId=${claimId}`;\r\n    const mailString = `mailto:${email}?subject=${subject}&body=${body} ${url}`;\r\n    window.location.href = mailString;\r\n  }\r\n\r\n  return (\r\n    <div className=\"submit-devices\">\r\n      <div>\r\n        <button\r\n          className=\"App__install-button\"\r\n          disabled={!devices.length}\r\n          onClick={claimToSelf}\r\n        >Add devices to me</button>\r\n      </div>\r\n      <br />\r\n      <div>Or add devices to another person:</div>\r\n      <div className=\"submit-devices__email\">\r\n        <label className=\"device-list__label\">Email: </label>\r\n        <input\r\n          className=\"device-list__name\"\r\n          type=\"email\"\r\n          onChange={e => setEmail(e.target.value)}\r\n          disabled={!devices.length}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button\r\n          className=\"App__install-button\"\r\n          onClick={sendMail}\r\n          disabled={!devices.length || !email}\r\n        >Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubmitDevices;\r\n","import React from 'react';\r\nimport QrReader from 'react-qr-reader';\r\nimport useDevices from './useDevices';\r\nimport DeviceList from '../../components/DeviceList/DeviceList';\r\nimport SubmitDevices from '../../components/SubmitDevices/SubmitDevices';\r\nimport './Commissioning.css';\r\n\r\nconst Commissioning = () => {\r\n  const [state, dispatch] = useDevices();\r\n\r\n  const handleScan = data => {\r\n    if (data) dispatch({ type: 'add', id: data });\r\n  }\r\n\r\n  const editName = e => {\r\n    dispatch({type: 'editName', id: e.target.id, name: e.target.value});\r\n  }\r\n\r\n  const handleError = err => {\r\n    console.error(err)\r\n  }\r\n\r\n  return (\r\n    <div className=\"commissioning\">\r\n      <QrReader\r\n        delay={300}\r\n        onError={handleError}\r\n        onScan={handleScan}\r\n        style={{ maxWidth: '600px', margin: '20px auto' }}\r\n      />\r\n      <DeviceList devices={state} onChangeName={editName} />\r\n      <SubmitDevices devices={state} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Commissioning;\r\n","import React from 'react';\r\nimport { Route, Redirect, Switch } from 'react-router-dom';\r\nimport JodusNodus from './JodusNodus/JodusNodus';\r\nimport Commissioning from './Commissioning/Commissioning';\r\n\r\nconst Routes = () => (\r\n  <Switch>\r\n    <Route path=\"/jodusNodus\" component={JodusNodus} />\r\n    <Route path=\"/commissioning\" component={Commissioning} />\r\n    <Route path=\"*\">\r\n      <Redirect to=\"/commissioning\" />\r\n    </Route>\r\n  </Switch>\r\n);\r\n\r\nexport default Routes;\r\n","let deferredPrompt = null;\r\nexport let canInstall = false;\r\n\r\nexport const register = () => {\r\n  window.addEventListener('beforeinstallprompt', e => {\r\n    // Prevent Chrome 67 and earlier from automatically showing the prompt\r\n    e.preventDefault();\r\n    // Stash the event so it can be triggered later.\r\n    deferredPrompt = e;\r\n    canInstall = true;\r\n  });\r\n};\r\n\r\nexport const promptInstallation = () => {\r\n  if (!deferredPrompt) return;\r\n  \r\n  deferredPrompt.prompt();\r\n  deferredPrompt.userChoice\r\n    .then(choice => {\r\n      if (choice.outcome === 'accepted') {\r\n        console.log('User accepted the A2HS prompt');\r\n      } else {\r\n        console.log('User dismissed the A2HS prompt');\r\n      }\r\n      deferredPrompt = null;\r\n      canInstall = false;\r\n    });\r\n};\r\n","import React from 'react';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport Routes from '../../routes';\r\nimport * as homeScreen from '../../homeScreen';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      </header>\r\n\r\n      <section>\r\n        <HashRouter>\r\n          <Routes></Routes>\r\n        </HashRouter>\r\n      </section>\r\n\r\n      <footer>\r\n        {\r\n          homeScreen.canInstall\r\n            ? <button onClick={homeScreen.promptInstallation} className=\"App__install-button\">Install me</button>\r\n            : null\r\n        }\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as homeScreen from './homeScreen';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\nhomeScreen.register();\r\n"],"sourceRoot":""}