{"version":3,"sources":["components/App/logo.svg","routes/JodusNodus/JodusNodus.js","routes/index.js","homeScreen.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","JodusNodus","useState","result","setResult","delay","onError","err","console","error","onScan","data","style","maxWidth","margin","Routes","path","component","to","deferredPrompt","promptInstallation","prompt","userChoice","then","choice","outcome","log","App","className","src","logo","alt","onClick","homeScreen","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","e","preventDefault"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,0MC2B5BC,EAxBI,WAAO,IAAD,EACKC,mBAAS,aADd,mBAChBC,EADgB,KACRC,EADQ,KAWvB,OACE,6BACE,kBAAC,IAAD,CACEC,MAAO,IACPC,QARc,SAAAC,GAClBC,QAAQC,MAAMF,IAQVG,OAba,SAAAC,GACbA,GAAMP,EAAUO,IAahBC,MAAO,CAAEC,SAAU,QAASC,OAAQ,eAEtC,2BAAIX,KCTKY,EATA,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,cAAcC,UAAWhB,IACrC,kBAAC,IAAD,CAAOe,KAAK,KACV,kBAAC,IAAD,CAAUE,GAAG,mBCRfC,EAAiB,KAWRC,EAAqB,WAC3BD,IAELA,EAAeE,SACfF,EAAeG,WACZC,MAAK,SAAAC,GACmB,aAAnBA,EAAOC,QACTjB,QAAQkB,IAAI,iCAEZlB,QAAQkB,IAAI,kCAEdP,EAAiB,U,uBCKRQ,MApBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAG3C,iCACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAIJ,gCACE,4BAAQC,QAASC,EAA+BL,UAAU,uBAA1D,iBCTFM,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTlB,MAAK,SAAAuB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1B5C,QAAQkB,IACN,iHAKEgB,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBtC,QAAQkB,IAAI,sCAGRgB,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAAA9C,GACLD,QAAQC,MAAM,4CAA6CA,MCzFjE+C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDe1C,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,cAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,cAAN,sBAEP3B,IAgEV,SAAiCO,EAAOC,GAEtCuB,MAAMxB,GACHlB,MAAK,SAAA2C,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAMjD,MAAK,SAAAuB,GACjCA,EAAa2B,aAAalD,MAAK,WAC7Ba,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACL/C,QAAQkB,IACN,oEArFAiD,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAMjD,MAAK,WACjCf,QAAQkB,IACN,iHAMJc,EAAgBC,EAAOC,OCtC/BE,GHTER,OAAO4B,iBAAiB,uBAAuB,SAAAY,GAE7CA,EAAEC,iBAEF1D,EAAiByD,O","file":"static/js/main.17920508.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useState } from 'react';\r\nimport QrReader from 'react-qr-reader';\r\n\r\nconst JodusNodus = () => {\r\n  const [result, setResult] = useState('No result');\r\n\r\n  const handleScan = data => {\r\n    if (data) setResult(data);\r\n  }\r\n\r\n  const handleError = err => {\r\n    console.error(err)\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <QrReader\r\n        delay={300}\r\n        onError={handleError}\r\n        onScan={handleScan}\r\n        style={{ maxWidth: '600px', margin: '20px auto' }}\r\n      />\r\n      <p>{result}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JodusNodus;\r\n","import React from 'react';\r\nimport { Route, Redirect, Switch } from 'react-router-dom';\r\nimport JodusNodus from './JodusNodus/JodusNodus';\r\n\r\nconst Routes = () => (\r\n  <Switch>\r\n    <Route path=\"/jodusNodus\" component={JodusNodus} />\r\n    <Route path=\"*\">\r\n      <Redirect to=\"/jodusNodus\" />\r\n    </Route>\r\n  </Switch>\r\n);\r\n\r\nexport default Routes;\r\n","let deferredPrompt = null;\r\n\r\nexport const register = () => {\r\n  window.addEventListener('beforeinstallprompt', e => {\r\n    // Prevent Chrome 67 and earlier from automatically showing the prompt\r\n    e.preventDefault();\r\n    // Stash the event so it can be triggered later.\r\n    deferredPrompt = e;\r\n  });\r\n};\r\n\r\nexport const promptInstallation = () => {\r\n  if (!deferredPrompt) return;\r\n  \r\n  deferredPrompt.prompt();\r\n  deferredPrompt.userChoice\r\n    .then(choice => {\r\n      if (choice.outcome === 'accepted') {\r\n        console.log('User accepted the A2HS prompt');\r\n      } else {\r\n        console.log('User dismissed the A2HS prompt');\r\n      }\r\n      deferredPrompt = null;\r\n    });\r\n};\r\n","import React from 'react';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport Routes from '../../routes';\r\nimport * as homeScreen from '../../homeScreen';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      </header>\r\n\r\n      <section>\r\n        <HashRouter>\r\n          <Routes></Routes>\r\n        </HashRouter>\r\n      </section>\r\n\r\n      <footer>\r\n        <button onClick={homeScreen.promptInstallation} className=\"App__install-button\">Install me</button>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as homeScreen from './homeScreen';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\nhomeScreen.register();\r\n"],"sourceRoot":""}